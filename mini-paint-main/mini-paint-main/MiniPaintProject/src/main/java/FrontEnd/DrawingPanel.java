/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package FrontEnd;

import BackEnd.Circle;
import BackEnd.DrawingEngine;
import BackEnd.LineSegment;
import BackEnd.Shape;
import java.awt.Graphics;
import java.awt.List;
import java.util.ArrayList;

/**
 *
 * @author moham
 */
public class DrawingPanel extends javax.swing.JPanel implements DrawingEngine{

    /**
     * Creates new form DrawingPanel
     */
    ArrayList<Shape> shapes;
    
    public DrawingPanel() {
        initComponents();   
        shapes = new ArrayList<Shape>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    
    
    @Override
    public void paintComponent(Graphics g){
        super.paintComponent(g);
        for (int i =0;i<shapes.size();i++){
            if(shapes.get(i) instanceof LineSegment){
                LineSegment line = (LineSegment)shapes.get(i);                
                line.draw(g);
                
            } else{
                Circle circle = (Circle)shapes.get(i);
                circle.draw(g);
            }
        }
    }
    @Override
    public void addShape(Shape shape) {
        this.shapes.add(shape);
    }

    @Override
    public void removeShape(Shape shape) {
        this.shapes.remove(shape);
    }

    @Override
    public Shape[] getShapes() {
        return this.shapes.toArray(new Shape[0]);
    }

    @Override
    public void refresh(Graphics canvas) {
        repaint();
    }
    

    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
